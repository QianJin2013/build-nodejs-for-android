#!/bin/bash
function _msg { echo "$@" >&2; }
function _dbg { [[ $NODEJS_BUILD_DBG == 1 ]] && echo "$@" >&2; }

VERSION=1.3

OUT_DIR=""; ARCH=""; APIL=""; STL=""; VERBOSE=""; PRE_CLEAN=""; BUILD_TYPE=""; TAG="";

while [[ $# -gt 0 ]]; do
    _dbg "\"$1\""
    case $1 in
    --arch) case $2 in arm|arm64|x86|x64|mipsel) ARCH=$2; _dbg " ARCH=\"$2\""; shift;;
            ""|-*) _msg "expect arch behind $1. Must be arm(default)|arm64|x86|x64|mipsel"; exit 1;;
            *) _msg "invalid arch \"$2\". Must be arm(default)|arm64|x86|x64|mipsel"; exit 1;;
            esac
            ;;
    --api)  case $2 in min|max) APIL=$2; _dbg " APIL=\"$2\""; shift;;
            ""|-*) _msg "expect Android API level behind $1. Must be min(default)|max|an integer"; exit 1;;
            *[!0-9]*) _msg "invalid Android API level \"$2\". Must be min(default)|max|an integer"; exit 1;;
            *) APIL=$2; _dbg " APIL=\"$2\""; shift;;
            esac
            ;;
    --stl)  case $2 in gnustl|libc++|stlport) STL=$2; _dbg " STL=\"$2\""; shift;;
            ""|-*) _msg "expect C++ STL behind $1. Must be gnustl(default)|libc++|stlport"; exit 1;;
            *) _msg "invalid C++ STL \"$2\". Must be gnustl(default)|libc++|stlport"; exit 1;;
            esac
            ;;
    arm|arm64|x86|x64|mipsel)
            ARCH=$1; _dbg " ->ARCH"
            ;;
    -o|--out)  case $2 in
            ""|-*) _msg "expect output dir behind $1"; exit 1;;
            *) OUT_DIR=$2; _dbg " OUT_DIR=\"$2\""; shift;;
            esac
            ;;
    --pre-clean)
            PRE_CLEAN=$1; _dbg " ->PRE_CLEAN"
            ;;
    --full)
            BUILD_TYPE=full; _dbg " BUILD_TYPE=full"
            ;;
    --limited)
            BUILD_TYPE=limited; _dbg " BUILD_TYPE=limited"
            ;;
    -v|--verbose)
            VERBOSE=--verbose; _dbg " ->VERBOSE"
            ;;
    --help*|--version)
            break
            ;;
    v*.*.*)
            TAG=$1; _dbg " ->TAG";
            ;;
    --*)
            _msg "invalid long option \"$1\". Must be --out|--full|--limited|--arch|--api|--stl|pre-clean|--verbose|--version|--help"
            exit 1
            ;;
    -*)
            _msg "invalid short option \"$1\". Must be -o(out) or -v(verbose)"
            exit 1
            ;;
    "")
            _dbg " :skip isolated empty arg"
            ;;
    *)
            _msg "invalid TAG \"$1\". must be v*.*.*, for example: v6.6.0"; exit 1
            ;;
    esac

    shift
done

case $1 in
--help)
    _msg "${0##*/} $VERSION"
    _msg "Build node.js for android from source in current dir"
    _msg ""
    _msg "Usage: ${0##*/} [OPTIONS]"
    _msg "--------------------------------------------------------------------------------"
    _msg "OPTIONS:"
    _msg " [--arch] ARCH  Android architecture:"
    _msg "                {arm(default)|arm64|x86|x64|mipsel}"
    _msg " --api    APIL  Android API level:"
    _msg "                {min(default)|max|an integer}"
    _msg " --stl    STL   C++ STL to use:"
    _msg "                {gnustl(default)|libc++|stlport}"
    _msg " --limited      Build --without-snapshot --without-inspector --without-intl"
    _msg "                This is the default build type, limited build."
    _msg " --full         Full build, not specify any --without-... option to NodeJS"
    _msg "                Do not use with --limited."
    _msg ""
    _msg " -o OUT_DIR, --out OUT_DIR"
    _msg "                Output dir or base output dir for batch mode(vN.N.N)."
    _msg "                In batch mode(vN.N.N), by default it is \"..\"."
    _msg "                Otherwise, by default then output dir is:"
    _msg "                 ../nodejs-android-ARCH/       or"
    _msg "                 ../nodejs-android-ARCH-full/  if --full is specified"
    _msg "                The log will be saved as as build.log at above dir."
    _msg ""
    _msg " vN.N.N         A git branch or tag name. For example: v6.6.0."
    _msg "                This is the batch build mode for specific version."
    _msg "                This will checkout the branch or tag, then build it for all"
    _msg "                arch(arm,arm64,x86,x64,mipsel) and all build types(limited,full)"
    _msg "                if no ARCH --limited --full specified, otherwise build for the"
    _msg "                specified ARCH and build type."
    _msg ""
    _msg "                The output will be saved at"
    _msg "                 OUT_DIR/nodejs-N.N.N-android-ARCH/"
    _msg "                 OUT_DIR/nodejs-N.N.N-android-ARCH-full/"
    _msg "                The log will be saved as as build.log at above dir."
    _msg "                The OUT_DIR is \"..\" by default."
    _msg ""
    _msg " --pre-clean    Remove ./out/* before build"
    _msg " -v, --verbose  Show verbose information, include compiler arguments"
    _msg " --version      Show version of this tool"
    _msg ""
    exit 0
    ;;
--version)
    _msg $VERSION
    exit 0
    ;;
esac

OPT=""
[[ $APIL ]] && OPT+=" --api $APIL"
[[ $STL ]] && OPT+=" --stl $STL"

[[ $VERBOSE ]] && export AGCC_VERBOSE=1

###############################################################################
#batch mode

if [[ $TAG ]]; then
    _msg "Stash local changes before checkout $TAG"
    git stash --include-untracked || exit 1
    _msg "Checkout $TAG"
    git checkout "$TAG" || exit 1
    _msg ""
    _msg "------------------------------------------------------------------------"
    _msg current version of source of NodeJS:
    git log -1 --oneline --decorate
    _msg "------------------------------------------------------------------------"

    BASE_OUT_DIR=$OUT_DIR; [[ ! $OUT_DIR ]] && BASE_OUT_DIR=..
    VER=${TAG#v} #remove first v char

    results=()
    lastResult=""
    [[ $ARCH ]] && ARCH_LIST=($ARCH) || ARCH_LIST=(arm arm64 x86 x64 mipsel)
    for ARCH in "${ARCH_LIST[@]}"; do
        if [[ ! $BUILD_TYPE || $BUILD_TYPE == limited ]]; then
            git clean -fdx && git reset --hard
            OUT_DIR=$BASE_OUT_DIR/nodejs-$VER-android-$ARCH
            "$0" $ARCH -o $OUT_DIR $OPT
            lastResult=$?
            [[ $lastResult == 0 ]] && results+=("SUCCESS: $OUT_DIR") || results+=("FAILURE: $OUT_DIR")
        fi
        if [[ ! $BUILD_TYPE || $BUILD_TYPE == full ]]; then
            git clean -fdx && git reset --hard
            OUT_DIR=$BASE_OUT_DIR/nodejs-$VER-android-$ARCH-full
            "$0" $ARCH -o $OUT_DIR $OPT --full
            lastResult=$?
            [[ $lastResult == 0 ]] && results+=("SUCCESS: $OUT_DIR") || results+=("FAILURE: $OUT_DIR")
        fi
    done
    [[ $lastResult == 0 ]] && git clean -fdx && git reset --hard

    _msg "--------------------------------------------------------------------------------"
    for r in "${results[@]}"; do _msg "$r"; done
    _msg "Done, please check build.log in above dirs for error."
    [[ "${results[*]}" == FAILURE:* ]] && exit 1
    exit 0
fi



###############################################################################



[[ ! $ARCH ]] && ARCH=arm

[[ ! $OUT_DIR ]] && { OUT_DIR=../nodejs-android-$ARCH; [[ $BUILD_TYPE == full ]] && OUT_DIR+=-full; }
[[ -d $OUT_DIR ]] || { mkdir -pv "$OUT_DIR" || exit 1; }

#pre-clean
[[ $PRE_CLEAN ]] && rm -fr out

#auto pre-clean and leave a flag file
flagFilePath=out/.build-nodejs-for-android-$ARCH; [[ $BUILD_TYPE == full ]] && flagFilePath+=-full
if [[ -d out ]]; then
    fileList=(out/.build-nodejs-for-android-*)
    if [[ ${fileList[0]} != *\** && ${fileList[0]} != $flagFilePath ]]; then
        _msg "Removing out/* because arch or build type is different as previous build"
        rm -fr out/*
    fi
    rm -f out/.build-nodejs-for-android-*
else
    mkdir out
fi
touch $flagFilePath

#OK, now build nodejs with android-gcc-toolchain
(
    if [[ $BUILD_TYPE == full ]]; then
        case $OSTYPE in
        darwin*)
            case $ARCH in
            arm    ) android-gcc-toolchain arm    $OPT --host ar-dual-os,gcc-no-lrt,gcc-m32 -C <<< "./configure --dest-cpu=arm    --dest-os=android && make" ;;
            arm64  ) android-gcc-toolchain arm64  $OPT --host ar-dual-os,gcc-no-lrt         -C <<< "./configure --dest-cpu=arm64  --dest-os=android && make" ;;
            x86    ) android-gcc-toolchain x86    $OPT --host ar-dual-os,gcc-no-lrt,gcc-m32 -C <<< "sed -i.bak 's/cross_compiling = target_arch != host_arch/cross_compiling = True/' configure && ./configure --dest-cpu=x86 --dest-os=android && make" ;;
            x64    ) android-gcc-toolchain x64    $OPT --host ar-dual-os,gcc-no-lrt         -C <<< "sed -i.bak 's/cross_compiling = target_arch != host_arch/cross_compiling = True/' configure && ./configure --dest-cpu=x64 --dest-os=android --openssl-no-asm && make" ;;
            mipsel ) android-gcc-toolchain mipsel $OPT --host ar-dual-os,gcc-no-lrt,gcc-m32 -C <<< "./configure --dest-cpu=mipsel --dest-os=android && make" ;;
            esac;;
        linux*)
            case $ARCH in
            arm    ) android-gcc-toolchain arm    $OPT --host gcc-lpthread,gcc-m32 -C <<< "./configure --dest-cpu=arm    --dest-os=android && make" ;;
            arm64  ) android-gcc-toolchain arm64  $OPT --host gcc-lpthread         -C <<< "./configure --dest-cpu=arm64  --dest-os=android && make" ;;
            x86    ) android-gcc-toolchain x86    $OPT --host gcc-lpthread,gcc-m32 -C <<< "sed -i.bak 's/cross_compiling = target_arch != host_arch/cross_compiling = True/' configure && ./configure --dest-cpu=x86 --dest-os=android && make" ;;
            x64    ) android-gcc-toolchain x64    $OPT --host gcc-lpthread         -C <<< "sed -i.bak 's/cross_compiling = target_arch != host_arch/cross_compiling = True/' configure && ./configure --dest-cpu=x64 --dest-os=android --openssl-no-asm && make" ;;
            mipsel ) android-gcc-toolchain mipsel $OPT --host gcc-lpthread,gcc-m32 -C <<< "./configure --dest-cpu=mipsel --dest-os=android && make" ;;
            esac;;
        *) _msg "unsupported host OS $OSTYPE. Please use Mac or Linux"; exit 1 ;;
        esac
    else
        case $ARCH in
        arm    ) android-gcc-toolchain arm    $OPT <<< "./configure --dest-cpu=arm    --dest-os=android --without-snapshot --without-inspector --without-intl && make" ;;
        arm64  ) android-gcc-toolchain arm64  $OPT <<< "./configure --dest-cpu=arm64  --dest-os=android --without-snapshot --without-inspector --without-intl && make" ;;
        x86    ) android-gcc-toolchain x86    $OPT <<< "./configure --dest-cpu=x86    --dest-os=android --without-snapshot --without-inspector --without-intl && make" ;;
        x64    ) android-gcc-toolchain x64    $OPT <<< "./configure --dest-cpu=x64    --dest-os=android --without-snapshot --without-inspector --without-intl --openssl-no-asm && make" ;;
        mipsel ) android-gcc-toolchain mipsel $OPT <<< "./configure --dest-cpu=mipsel --dest-os=android --without-snapshot --without-inspector --without-intl && make" ;;
        esac
    fi
) 2>&1 | tee "$OUT_DIR"/build.log

[[ ${PIPESTATUS[0]} != 0 ]] && exit 1

rm -fr "$OUT_DIR/"bin "$OUT_DIR/"lib "$OUT_DIR/"include "$OUT_DIR/"extras

#copy build result to $OUT_DIR/{bin,lib,include}
android-gcc-toolchain $ARCH $OPT -C make DESTDIR="$OUT_DIR" PREFIX="" install | grep -vE '^installing|^symlinking|^removing'
[[ ${PIPESTATUS[0]} != 0 ]] && { _msg "failed to run make install"; exit 1; }

mkdir "$OUT_DIR/extras" && \
for f in out/Release/*; do
    [[ -f $f && -x $f && ${f##*/} != node ]] && ln -f "$f" "$OUT_DIR/extras"
done

ls -lF "$OUT_DIR/bin/"* "$OUT_DIR/extras/"*

exit 0
